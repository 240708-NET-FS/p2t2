// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pawsonality.API.DAO;

#nullable disable

namespace PawsonalityApp.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240826181311_ThirdMigration")]
    partial class ThirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pawsonality.API.Models.Answer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerID"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("AnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answer");

                    b.HasData(
                        new
                        {
                            AnswerID = 1,
                            AnswerText = "Attending a social event or party",
                            AnswerType = "Dog",
                            QuestionID = 1
                        },
                        new
                        {
                            AnswerID = 2,
                            AnswerText = "Curled up with a good book or movie at home",
                            AnswerType = "Cat",
                            QuestionID = 1
                        },
                        new
                        {
                            AnswerID = 3,
                            AnswerText = "Exploring the outdoors or going on a hike",
                            AnswerType = "Bird",
                            QuestionID = 1
                        },
                        new
                        {
                            AnswerID = 4,
                            AnswerText = "Observing and analyzing something quietly, perhaps in a cozy corner",
                            AnswerType = "Snake",
                            QuestionID = 1
                        },
                        new
                        {
                            AnswerID = 5,
                            AnswerText = "Gather your friends and brainstorm together",
                            AnswerType = "Dog",
                            QuestionID = 2
                        },
                        new
                        {
                            AnswerID = 6,
                            AnswerText = "Think it through on your own and come up with a creative solution",
                            AnswerType = "Cat",
                            QuestionID = 2
                        },
                        new
                        {
                            AnswerID = 7,
                            AnswerText = "Look at the problem from different perspectives and find a high-level view",
                            AnswerType = "Bird",
                            QuestionID = 2
                        },
                        new
                        {
                            AnswerID = 8,
                            AnswerText = "Study the issue deeply and methodically until you find the best solution",
                            AnswerType = "Snake",
                            QuestionID = 2
                        },
                        new
                        {
                            AnswerID = 9,
                            AnswerText = "Excited! You love making new friends",
                            AnswerType = "Dog",
                            QuestionID = 3
                        },
                        new
                        {
                            AnswerID = 10,
                            AnswerText = "Cautious at first, but you warm up once you feel comfortable",
                            AnswerType = "Cat",
                            QuestionID = 3
                        },
                        new
                        {
                            AnswerID = 11,
                            AnswerText = "Interested, but you prefer to keep interactions light and breezy",
                            AnswerType = "Bird",
                            QuestionID = 3
                        },
                        new
                        {
                            AnswerID = 12,
                            AnswerText = "Selective; you prefer deep, meaningful connections over casual ones",
                            AnswerType = "Snake",
                            QuestionID = 3
                        },
                        new
                        {
                            AnswerID = 13,
                            AnswerText = "A bustling, lively place full of energy and activity",
                            AnswerType = "Dog",
                            QuestionID = 4
                        },
                        new
                        {
                            AnswerID = 14,
                            AnswerText = "A calm, quiet space where you can relax and be yourself",
                            AnswerType = "Cat",
                            QuestionID = 4
                        },
                        new
                        {
                            AnswerID = 15,
                            AnswerText = "An open, airy space with plenty of room to roam",
                            AnswerType = "Bird",
                            QuestionID = 4
                        },
                        new
                        {
                            AnswerID = 16,
                            AnswerText = "A secluded, undisturbed spot where you can focus and observe",
                            AnswerType = "Snake",
                            QuestionID = 4
                        },
                        new
                        {
                            AnswerID = 17,
                            AnswerText = "Lean on your friends or loved ones for support",
                            AnswerType = "Dog",
                            QuestionID = 5
                        },
                        new
                        {
                            AnswerID = 18,
                            AnswerText = "Retreat to your personal space to recharge and reflect",
                            AnswerType = "Cat",
                            QuestionID = 5
                        },
                        new
                        {
                            AnswerID = 19,
                            AnswerText = "Rise above the situation and look at it from a different perspective",
                            AnswerType = "Bird",
                            QuestionID = 5
                        },
                        new
                        {
                            AnswerID = 20,
                            AnswerText = "Stay calm and composed, quietly analyzing your next move",
                            AnswerType = "Snake",
                            QuestionID = 5
                        },
                        new
                        {
                            AnswerID = 21,
                            AnswerText = "A group trip with friends to a fun destination",
                            AnswerType = "Dog",
                            QuestionID = 6
                        },
                        new
                        {
                            AnswerID = 22,
                            AnswerText = "A solo retreat to a peaceful and cozy spot",
                            AnswerType = "Cat",
                            QuestionID = 6
                        },
                        new
                        {
                            AnswerID = 23,
                            AnswerText = "An adventure exploring new places and enjoying nature",
                            AnswerType = "Bird",
                            QuestionID = 6
                        },
                        new
                        {
                            AnswerID = 24,
                            AnswerText = "A quiet escape where you can immerse yourself in your surroundings",
                            AnswerType = "Snake",
                            QuestionID = 6
                        });
                });

            modelBuilder.Entity("Pawsonality.API.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuestionText")
                        .IsUnique();

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            QuestionID = 1,
                            QuestionText = "How do you prefer to spend your weekend?"
                        },
                        new
                        {
                            QuestionID = 2,
                            QuestionText = "What's your approach to solving problems?"
                        },
                        new
                        {
                            QuestionID = 3,
                            QuestionText = "How do you feel about meeting new people?"
                        },
                        new
                        {
                            QuestionID = 4,
                            QuestionText = "What type of environment do you thrive in?"
                        },
                        new
                        {
                            QuestionID = 5,
                            QuestionText = "How do you handle stressful situations?"
                        },
                        new
                        {
                            QuestionID = 6,
                            QuestionText = "What's your idea of a perfect vacation?"
                        });
                });

            modelBuilder.Entity("Pawsonality.API.Models.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"));

                    b.Property<string>("ResultValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ResultID");

                    b.HasIndex("UserId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pawsonality.API.Models.Answer", b =>
                {
                    b.HasOne("Pawsonality.API.Models.Question", "Question")
                        .WithMany("Answer")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Pawsonality.API.Models.Result", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pawsonality.API.Models.Question", b =>
                {
                    b.Navigation("Answer");
                });
#pragma warning restore 612, 618
        }
    }
}
